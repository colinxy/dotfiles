;;; package --- summary  -*- mode: emacs-lisp -*-
;;; .emacs.min --- minimal emacs config

;;; Commentary:
;;
;; run Emacs as
;; \emacs -nw -q --load ~/.emacs.min

;;; Code:

;; disable start-up message
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message "colinxy")

;; less frequent garbage collection
(setq gc-cons-threshold (* 50 1024 1024))
(setq gc-cons-percentage 0.6)
(run-with-idle-timer
 1 nil
 (lambda () (setq gc-cons-threshold (* 5 1024 1024))))

;; backup files
(setq backup-directory-alist '(("." . "~/.saves"))
      backup-by-copying t
      delete-old-versions t
      kept-new-versions 10
      kept-old-versions 2
      version-control t)

;; substitute y-or-n-p for yes-or-no-p
(defalias 'yes-or-no-p 'y-or-n-p)

;; smooth scrolling
;; keyboard
(setq scroll-margin 1
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)
;; mouse
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
;; (setq mouse-wheel-progressive-speed nil) ; don't accelerate scrolling
(setq mouse-wheel-follow-mouse t)       ; scroll window under mouse

;; do not blink cursor
(blink-cursor-mode -1)
;; make cursor blink as few as possible
;; (setq blink-cursor-blinks 1)
;; show prefix key in echo area quicker
(setq echo-keystrokes 0.1)

;; auto revert if file changes on disk
(global-auto-revert-mode)

;; do not indent with tabs
(setq-default indent-tabs-mode nil)
;; (setq-default tab-width 4)
(global-set-key (kbd "RET") 'newline-and-indent)

;; some keys are easy to mispress
(global-unset-key (kbd "C-o"))
;; (global-unset-key (kbd "M-)"))
(global-unset-key (kbd "C-x C-n"))

;; ;; C-w : kill current line
;; (defun slick-cut (beg end &optional region)
;;   "When called interactively with no active region, kill a single line instead.
;; BEG END REGION"
;;   (interactive
;;    (if mark-active
;;        (list (region-beginning) (region-end))
;;      (list (line-beginning-position) (line-beginning-position 2)))))
;; (advice-add 'kill-region :before #'slick-cut)
;; ;; M-w : copy current line
;; (defun slick-copy (beg end &optional region)
;;   "When called interactively with no active region, copy a single line instead.
;; BEG END REGION"
;;   (interactive
;;    (if mark-active
;;        (list (region-beginning) (region-end))
;;      (message "Copied line")
;;      (push-mark)                 ;avoid point jumping to previous mark
;;      (list (line-beginning-position) (line-beginning-position 2)))))
;; (advice-add 'kill-ring-save :before #'slick-copy)

;; portable in older emacs without `advice-add'
(defadvice kill-region (before click-cut (beg end &optional region))
  "When called interactively with no active region, kill a single line instead.
BEG END REGION"
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))
     (list (line-beginning-position) (line-beginning-position 2)))))
(ad-activate 'kill-region)

(defadvice kill-ring-save (before slick-copy (beg end &optional region))
  "When called interactively with no active region, copy a single line instead.
BEG END REGION"
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))
     (message "Copied line")
     (push-mark)                 ;avoid point jumping to previous mark
     (list (line-beginning-position) (line-beginning-position 2)))))
(ad-activate 'kill-ring-save)

;; show line number and column number
(column-number-mode t)
;; show parens without delay
(custom-set-variables '(show-paren-delay 0.0))
(show-paren-mode 1)
(global-hl-line-mode)
;; (setq line-number-display-limit-width 5) ; line number in mode line
;; line-number-mode-hook

(transient-mark-mode t)

;; use DEL to delete selected text
(delete-selection-mode 1)

;; kill the entire line (including the newline character)
(setq kill-whole-line t)

;; consider CamelCase to be 2 words
;; subword minor mode, bind it to a mode hook

;; modifier key
(when (eq system-type 'darwin)
  (setq mac-option-modifier 'meta)
  (setq mac-command-modifier 'super)
  (global-set-key (kbd "s-c") 'kill-ring-save)
  (global-set-key (kbd "s-v") 'yank))

;; auto insert pair
;; M-( ; insert ()
(setq parens-require-spaces nil)
(electric-pair-mode 1)

;; upcase/downcase region
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)
(global-set-key (kbd "M-c") 'capitalize-dwim)

;; delete trailing white space
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; final newline
(setq require-final-newline t)

;; vc
(setq vc-follow-symlinks t)

;; some forgotten navigation and marking commands
;; C-M-f   `forward-sexp'
;; C-M-b   `backward-sexp'
;; C-M-SPC `mark-sexp'

;; isearch magic
;; IN isearch-mode-map
;; C-w   `isearch-yank-word-or-char'
;; M-s C-e `isearch-yank-line'
;; C-M-w `isearch-del-char'
;; C-M-y `isearch-yank-char'
;; M-s e `isearch-edit-string'
;; M-s o `isearch-occur': run occur on last search string
;; M-c   `isearch-toggle-case-fold'
;; M-r   `isearch-toggle-regexp'
(define-key isearch-mode-map (kbd "C-d") 'isearch-forward-symbol-at-point)
;; or M-s . outside of isearch mode

(setq split-width-threshold 150) ;split horizontally if at least <> columns

;; for window
(when tool-bar-mode
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (not window-system)
  (menu-bar-mode -1)
  ;; tango-dark is a good theme
  ;; (load-theme 'tango-dark t)
  )

;; move between windows
(if (display-graphic-p)
    (cond ((eq system-type 'darwin)
           (global-unset-key (kbd "s-q"))
           (global-set-key (kbd "s-<up>") 'windmove-up)
           (global-set-key (kbd "s-<down>") 'windmove-down)
           (global-set-key (kbd "s-<left>") 'windmove-left)
           (global-set-key (kbd "s-<right>") 'windmove-right))
          ((eq system-type 'gnu/linux)
           (global-set-key (kbd "C-<up>") 'windmove-up)
           (global-set-key (kbd "C-<down>") 'windmove-down)
           (global-set-key (kbd "C-<left>") 'windmove-left)
           (global-set-key (kbd "C-<right>") 'windmove-right)))
  ;; terminal
  (windmove-default-keybindings))

(unless window-system
  (define-key input-decode-map "\e[1;2A" [S-up])
  (define-key input-decode-map "\e[1;2B" [S-down])
  (define-key input-decode-map "\e[1;2D" [S-left])
  (define-key input-decode-map "\e[1;2C" [S-right]))


;; c/c++
(setq-default c-basic-offset 4
              c-default-style "k&r")

;; python
(setq-default python-indent-offset 4)


(provide '.emacs.min)
;;; .emacs.min ends here
