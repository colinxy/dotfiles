
* Emacs

Config file is =.emacs.d/init.el=
Packages are setup with use-package. Most packages are not ensured
(automatically downloaded). To download everything, uncomment the
following line and restart emacs.

#+BEGIN_SRC emacs-lisp

  (setq use-package-always-ensure t)

#+END_SRC

On an environment with limited needs, use =.emacs.min= as config
file.


* Python

** Install pip

use =--user= if no admin privilege

*** Method 1

#+BEGIN_SRC sh

  wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
  python ez_setup.py --user > /dev/null
  easy_install --user pip

#+END_SRC

*** Method 2

#+BEGIN_SRC sh

  wget https://bootstrap.pypa.io/get-pip.py
  python get-pip.py --user

#+END_SRC


** Additional python package for emacs elpy to work properly

use =pip3= for python3 packages

#+BEGIN_SRC sh

  # if use python instead of ipython, remove (elpy-use-ipython) from .emacs
  pip install --user ipython
  # for elpy completion and error detection
  pip install --user jedi importmagic flake8

#+END_SRC


** Upgrade python packages

*** To see outdated packages

#+BEGIN_SRC sh

  pip list --outdated

#+END_SRC

*** Upgrade all outdated packages

=pip= supports multiple arguments, so =-n1= option to =xargs= is not needed.
If =format= option to pip is set to =columns=, skip first 2 lines in
=pip list --outdated= output (start printing from the 3rd line).

#+BEGIN_SRC sh

  pip  list --outdated | tail -n +3 | awk '{print $1}' | xargs pip  install -U
  pip3 list --outdated | tail -n +3 | awk '{print $1}' | xargs pip3 install -U

#+END_SRC

To see the command composed by =xargs= before executing it,
use =xargs [xargs-options] echo [command]=.

*** Note on Python Packages as Executable Scripts

Most packages are available for both python2 and python3 under the same name,
while at the same time, they are linked as an executable in =/usr/local/bin=.
It is sometimes confusing whether you are using python 2 or 3 package if
directly invoked from command line.

Since I prefer python3 to python2, first upgrade python 2 packages,
then upgrade python3 packages, so that python3 packages would overwrite
python2 ones in =/usr/local/bin=.

When trying to run a tool only under python 2/3, use the following.

#+BEGIN_SRC sh

  python  -m flake8
  python3 -m flake8

#+END_SRC


* C/C++

** gdb-dashboard

 - nice gdb interface
 - https://github.com/cyrus-and/gdb-dashboard

#+BEGIN_SRC sh

  wget -P ~ git.io/.gdbinit

#+END_SRC

** Clang

#+BEGIN_SRC sh

  # on Mac
  brew install llvm --with-clang
  # on ubuntu
  apt-get install llvm-dev

#+END_SRC

** emacs irony-mode

Make sure to specify

#+BEGIN_EXAMPLE
-DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
#+END_EXAMPLE


* Javascript

** eslint

** tern
