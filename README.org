
* Emacs

Config file is =.emacs.d/init.el=
Packages are setup with use-package. Most packages are not ensured
(automatically downloaded). To download everything, uncomment the
following line and restart emacs.

#+BEGIN_SRC emacs-lisp

  (setq use-package-always-ensure t)

#+END_SRC

On an environment with limited needs, use =.emacs.min= as config
file.

** Emacs on Mac

#+BEGIN_SRC sh

  brew tap railwaycat/emacsmacport
  brew install emacs-mac --with-gnutls --with-imagemagick --with-modules --with-xml2 --with-modern-icon

#+END_SRC

To launch GUI emacs, add the following file =emacs= to somewhere in =PATH=,
and make sure executable bit is on

#+BEGIN_SRC bash

  #!/bin/bash
  exec /usr/local/opt/emacs-mac/Emacs.app/Contents/MacOS/Emacs "$@"

#+END_SRC

Disable some slow GUI components.
Reference: https://github.com/raxod502/radian/issues/180

#+BEGIN_SRC bash

  defaults write org.gnu.Emacs Emacs.ToolBar -string no
  defaults write org.gnu.Emacs Emacs.ScrollBar -string no

#+END_SRC

** Emacs in Terminal

control sequence get pasted with =Command-v=

bracketed paste mode https://cirw.in/blog/bracketed-paste

https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard/issues/31

=xclip-mode= solves the problem? It replied on =pbcopy/pbpaste= on
mac, and =xclip= on linux (=sudo apt-get install xclip=).


* Tmux

** on mac

problems with copy/paste, opening graphical applications

solution: https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard

#+BEGIN_SRC sh

  brew install reattach-to-user-namespace

#+END_SRC

#+BEGIN_SRC conf

  if-shell 'test "$(uname -s)" = Darwin' 'set-option -g default-command "exec reattach-to-user-namespace -l $SHELL"'

#+END_SRC


* Python

** Install pip

use =--user= if no admin privilege

*** Method 1

#+BEGIN_SRC sh

  wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
  python ez_setup.py --user > /dev/null
  easy_install --user pip

#+END_SRC

*** Method 2

#+BEGIN_SRC sh

  wget https://bootstrap.pypa.io/get-pip.py
  python get-pip.py --user

#+END_SRC

*** Add config file and environment variable to silence warning

environment variable: =PIP_CONFIG_FILE=$HOME/.config/pip/pip.conf=

#+BEGIN_SRC conf

  [global]
  timeout=3

  [list]
  format=columns

#+END_SRC


** Additional python package for emacs elpy to work properly

use =pip3= for python3 packages

#+BEGIN_SRC sh

  # if use python instead of ipython, remove (elpy-use-ipython) from .emacs
  pip install --user ipython
  # for elpy completion and error detection
  pip install --user jedi importmagic flake8

#+END_SRC


** Upgrade python packages

*** To see outdated packages

#+BEGIN_SRC sh

  pip list --outdated

#+END_SRC

*** Upgrade all outdated packages

=pip= supports multiple arguments, so =-n1= option to =xargs= is not needed.
If =format= option to pip is set to =columns=, skip first 2 lines in
=pip list --outdated= output (start printing from the 3rd line).

#+BEGIN_SRC sh

  pip  list --outdated | tail -n +3 | awk '{print $1}' | xargs pip  install -U
  pip3 list --outdated | tail -n +3 | awk '{print $1}' | xargs pip3 install -U

#+END_SRC

To see the command composed by =xargs= before executing it,
use =xargs [xargs-options] echo [command]=.

*** Note on Python Packages as Executable Scripts

Most packages are available for both python2 and python3 under the same name,
while at the same time, they are linked as an executable in =/usr/local/bin=.
It is sometimes confusing whether you are using python 2 or 3 package if
directly invoked from command line.

Since I prefer python3 to python2, first upgrade python 2 packages,
then upgrade python3 packages, so that python3 packages would overwrite
python2 ones in =/usr/local/bin=.

When trying to run a tool only under python 2/3, use the following.

#+BEGIN_SRC sh

  python  -m flake8
  python3 -m flake8

#+END_SRC


** Pyenv

#+BEGIN_SRC sh
  apt-get build-dep python3
  # install pyenv
  # curl: from github
  export PATH="$HOME/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
#+END_SRC


* C/C++

** gdb-dashboard

 - nice gdb interface
 - https://github.com/cyrus-and/gdb-dashboard

#+BEGIN_SRC sh

  wget -P ~ git.io/.gdbinit

#+END_SRC

** Clang

#+BEGIN_SRC sh

  # on Mac
  brew install llvm --with-clang
  # on ubuntu
  apt-get install llvm-dev clang libclang-dev

#+END_SRC

** Tools

#+BEGIN_SRC sh

  brew install cmake
  apt-get install cmake

#+END_SRC

** emacs irony-mode

=M-x irony-install-server=: Make sure to specify the following

#+BEGIN_EXAMPLE
-DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
#+END_EXAMPLE

** man pages

amazing c++ documentation, from https://github.com/jeaye/stdman

#+BEGIN_SRC sh

  brew install stdman

#+END_SRC


* Javascript

** Runtime and Package Manager

 - nodejs, npm

#+BEGIN_SRC sh

  # Mac
  brew install nodejs npm
  # ubuntu
  apt-get install nodejs npm
  # for ubuntu, node might have to be symlinked
  ln -s /usr/bin/nodejs /usr/bin/node

#+END_SRC

 - npm install user global:
   https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md

   - local directory

     #+BEGIN_SRC sh

       mkdir "${HOME}/.npm-packages"

     #+END_SRC

   - add to =~/.npmrc=
     #+BEGIN_EXAMPLE
     prefix=${HOME}/.npm-packages
     #+END_EXAMPLE

   - add to =.bashrc=
     #+BEGIN_SRC sh

       NPM_PACKAGES="${HOME}/.npm-packages"

       PATH="$NPM_PACKAGES/bin:$PATH"

       # Unset manpath so we can inherit from /etc/manpath via the `manpath` command
       unset MANPATH # delete if you already modified MANPATH elsewhere in your config
       export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"

     #+END_SRC

** Linter: eslint, Completion: tern

#+BEGIN_SRC sh

  # no need to sudo
  npm install -g eslint tern

#+END_SRC

 - =tern=: add a default config under home directory
   #+BEGIN_SRC javascript

     // ~/.tern-project
     {
       "plugins": {
         "es_modules": {},
         "node": {}
       },
       "libs": [
         "ecma5",
         "ecma6"
       ],
       "ecmaVersion": 6
     }

   #+END_SRC

 - =eslint=: add a default config under home directory
   #+BEGIN_SRC javascript

     // ~/.eslintrc.json
     {
       "env": {
         "browser": true,
         "node": true,
         "es6": true
       },
       "rules": {
         "no-use-before-define": "error"
       }
     }

   #+END_SRC


* Bash Powerline

#+BEGIN_SRC sh

  pip install powerline-status

#+END_SRC

more stuff to do
 - http://powerline.readthedocs.io/en/master/usage/shell-prompts.html#bash-prompt
 - fonts
   #+BEGIN_SRC sh

     sudo apt-get install fonts-powerline

   #+END_SRC
 - http://powerline.readthedocs.io/en/master/configuration.html#quick-setup-guide
 - potiential problem:
   - exit code, git status not showing up
     - add =~/.config/powerline/config.json=
     - set
         : shell.theme = "default_leftonly"


* Shell Scripting

** shellcheck

#+BEGIN_SRC sh

  brew install shellcheck
  apt-get install shellcheck

#+END_SRC


* Ruby

#+BEGIN_SRC sh

  gem install pry robocop jekyll

#+END_SRC


* Linux (mac)

** ip command

For mac, emulate =ip= from Linux

#+BEGIN_SRC sh

  brew tap brona/iproute2mac
  brew install iproute2mac

#+END_SRC


* Pastebin

https://github.com/defunkt/gist


* IRC

** ZNC bouncer

#+BEGIN_SRC sh

  DATADIR=/var/lib/znc

  sudo apt install znc znc-dev
  getent passwd znc || sudo useradd znc
  mkdir -p $DATADIR && chown -R znc:znc $DATADIR
  sudo -u znc znc --makeconf --datadir $DATADIR

  git clone https://github.com/jpnurmi/znc-playback.git
  cd znc-playback/ && znc-buildmod playback.cpp
  mkdir -p $DATADIR/modules && mv playback.so $DATADIR/modules
  chown -R znc:znc ~/.znc         # permission issue
  # then follow instructions here to activate the playback module
  # https://wiki.znc.in/Playback

  # start znc as follows
  sudo -u znc znc --datadir $DATADIR

#+END_SRC

reference: https://www.andrewstambrosky.com/2016/11/19/znc-ubuntu-1604/

** circe (emacs)

https://github.com/jorgenschaefer/circe/
